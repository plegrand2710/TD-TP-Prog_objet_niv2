===== ApplicationDessin.java =====
package TP3;

import javax.swing.SwingUtilities;

public class ApplicationDessin {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new GestionnaireOnglets());
    }
}
---------------------------

===== ControleurDessin.java =====
package TP3;

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class ControleurDessin extends MouseAdapter {

    private ModeleDessin modele;
    private VueDessin vue;
    private Forme formeEnCours;

    public ControleurDessin(ModeleDessin modele, VueDessin vue) {
        this.modele = modele;
        this.vue = vue;
    }

    @Override
    public void mousePressed(MouseEvent e) {
        OutilDessin outil = vue.getOutilSelectionne();
        Color couleur = (outil == OutilDessin.GOMME) ? vue.getZoneDessin().getBackground() : vue.getCouleurTrait();
        float epaisseur = vue.getEpaisseurSelectionnee();
        formeEnCours = new Forme(outil, couleur, epaisseur);
        
        if (outil == OutilDessin.RECTANGLE || outil == OutilDessin.CERCLE) {
            formeEnCours.setRempli(vue.getEstRempli());
        }
        
        formeEnCours.ajouterPoint(e.getPoint());
        
        vue.getZoneDessin().setFormeEnCours(formeEnCours);
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        if (formeEnCours != null) {
            if (formeEnCours.getOutil() == OutilDessin.PINCEAUX || 
                formeEnCours.getOutil() == OutilDessin.GOMME) {
                formeEnCours.ajouterPoint(e.getPoint());
            } else if (formeEnCours.getOutil() == OutilDessin.LIGNE ||
                       formeEnCours.getOutil() == OutilDessin.RECTANGLE ||
                       formeEnCours.getOutil() == OutilDessin.CERCLE) {
                if (formeEnCours.getPoints().size() == 1) {
                    formeEnCours.ajouterPoint(e.getPoint());
                } else {
                    formeEnCours.getPoints().set(1, e.getPoint());
                }
            }
            vue.getZoneDessin().setFormeEnCours(formeEnCours);
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (formeEnCours != null) {
            if (formeEnCours.getOutil() == OutilDessin.LIGNE ||
                formeEnCours.getOutil() == OutilDessin.RECTANGLE ||
                formeEnCours.getOutil() == OutilDessin.CERCLE) {
                if (formeEnCours.getPoints().size() == 1) {
                    formeEnCours.ajouterPoint(e.getPoint());
                } else {
                    formeEnCours.getPoints().set(1, e.getPoint());
                }
            }
            modele.ajouterForme(formeEnCours);
            
            vue.getZoneDessin().setFormeEnCours(null);
            formeEnCours = null;
        }
    }
}
---------------------------

===== Forme.java =====
package TP3;

import java.awt.Color;
import java.awt.Point;
import java.io.Serializable;
import java.util.ArrayList;

public class Forme implements Serializable {
    private static final long serialVersionUID = 1L;
    private OutilDessin outil;
    private ArrayList<Point> points;
    private Color couleur;
    private float epaisseur;
    private boolean rempli;
    
    public Forme(OutilDessin outil, Color couleur, float epaisseur) {
        this.outil = outil;
        this.couleur = couleur;
        this.epaisseur = epaisseur;
        this.points = new ArrayList<>();
        this.rempli = false;
    }
    
    public OutilDessin getOutil() {
        return outil;
    }
    
    public ArrayList<Point> getPoints() {
        return points;
    }
    
    public Color getCouleur() {
        return couleur;
    }
    
    public float getEpaisseur() {
        return epaisseur;
    }
    
    public boolean getRempli() {
        return rempli;
    }
    
    public void setRempli(boolean rempli) {
        this.rempli = rempli;
    }
    
    public void ajouterPoint(Point point) {
        points.add(point);
    }
}
---------------------------

===== GestionnaireOnglets.java =====
package TP3;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;

public class GestionnaireOnglets extends JFrame {

    private JTabbedPane tabbedPane;

    public GestionnaireOnglets() {
        setTitle("Gestionnaire d'Onglets - Dessins");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1000, 700);
        setLocationRelativeTo(null);

        tabbedPane = new JTabbedPane();
        getContentPane().add(tabbedPane, BorderLayout.CENTER);

        JMenuBar menuBar = new JMenuBar();
        JMenu menuFichier = new JMenu("Fichier");

        JMenuItem itemAjouter = new JMenuItem("Ajouter onglet");
        JMenuItem itemSupprimer = new JMenuItem("Supprimer onglet");
        JMenuItem itemSauvegarder = new JMenuItem("Sauvegarder dessin");

        menuFichier.add(itemAjouter);
        menuFichier.add(itemSupprimer);
        menuFichier.addSeparator();
        menuFichier.add(itemSauvegarder);
        menuBar.add(menuFichier);
        setJMenuBar(menuBar);

        itemAjouter.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                ajouterOnglet();
            }
        });

        itemSupprimer.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                supprimerOnglet();
            }
        });

        itemSauvegarder.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                sauvegarderDessin();
            }
        });

        ajouterOnglet();

        setVisible(true);
    }

    private void ajouterOnglet() {
    	VueDessin vue = new VueDessin(new ModeleDessin());
    	tabbedPane.addTab("Dessin " + (tabbedPane.getTabCount() + 1), vue);
        tabbedPane.setSelectedComponent(vue);
    }

    private void supprimerOnglet() {
        int index = tabbedPane.getSelectedIndex();
        if (index != -1) {
            tabbedPane.removeTabAt(index);
        }
    }

    private void sauvegarderDessin() {
        int index = tabbedPane.getSelectedIndex();
        if (index != -1) {
            VueDessin vue = (VueDessin) tabbedPane.getComponentAt(index);
            JFileChooser chooser = new JFileChooser();
            if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                if (file.exists()) {
                    int rep = JOptionPane.showConfirmDialog(this, 
                        "Le fichier existe déjà. Voulez-vous l'écraser ?", 
                        "Confirmer", 
                        JOptionPane.YES_NO_OPTION);
                    if (rep != JOptionPane.YES_OPTION) {
                        return; 
                    }
                }
                try (FileOutputStream fos = new FileOutputStream(file);
                     ObjectOutputStream oos = new ObjectOutputStream(fos)) {
                    oos.writeObject(vue.getModele());
                    JOptionPane.showMessageDialog(this, "Dessin sauvegardé avec succès !");
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Erreur lors de la sauvegarde : " + ex.getMessage());
                }
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new GestionnaireOnglets();
            }
        });
    }
}
---------------------------

===== ModeleDessin.java =====
package TP3;

import java.awt.Color;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Stack;

public class ModeleDessin implements Serializable {
    private static final long serialVersionUID = 1L;
    private ArrayList<Forme> formes;
    private Stack<Forme> pileAnnuler;
    private Stack<Forme> pileRetablir;
    private Color couleurFond;
    
    public ModeleDessin() {
        formes = new ArrayList<>();
        pileAnnuler = new Stack<>();
        pileRetablir = new Stack<>();
        couleurFond = Color.WHITE;
    }
    
    public void ajouterForme(Forme forme) {
        formes.add(forme);
        pileAnnuler.push(forme);
        pileRetablir.clear();
    }
    
    public ArrayList<Forme> getFormes() {
        return formes;
    }
    
    public void annuler() {
        if (!pileAnnuler.isEmpty()) {
            Forme forme = pileAnnuler.pop();
            formes.remove(forme);
            pileRetablir.push(forme);
        }
    }
    
    public void retablir() {
        if (!pileRetablir.isEmpty()) {
            Forme forme = pileRetablir.pop();
            formes.add(forme);
            pileAnnuler.push(forme);
        }
    }
    
    public void effacer() {
        formes.clear();
        pileAnnuler.clear();
        pileRetablir.clear();
    }
    
    public Color getCouleurFond() {
        return couleurFond;
    }
    
    public void setCouleurFond(Color couleur) {
        couleurFond = couleur;
    }
}
---------------------------

===== OutilDessin.java =====
package TP3;

public enum OutilDessin {
    PINCEAUX, LIGNE, RECTANGLE, CERCLE, GOMME
}
---------------------------

===== VueDessin.java =====
package TP3;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.JColorChooser;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;

public class VueDessin extends JPanel {

    private ModeleDessin modele;
    private ControleurDessin controleur;
    private ZoneDessin zoneDessin;
    
    private JRadioButton rbPinceau, rbLigne, rbRectangle, rbCercle;
    
    private JRadioButton rbFill;
    
    private JSlider sliderTaille;
    
    private JRadioButton rbNoir, rbRouge, rbBleu, rbVert, rbJaune;
    private JButton btnChooseColor;
    
    private JRadioButton rbBgBlanc, rbBgRouge, rbBgBleu, rbBgVert, rbBgJaune;
    private JButton btnChooseBg;
    
    private JButton btnUndo, btnClear, btnRedo, btnGomme;
    
    private OutilDessin outilSelectionne;
    private Color couleurTrait = Color.BLACK;
    
    public VueDessin(ModeleDessin modele) {
        this.modele = modele;
        outilSelectionne = OutilDessin.PINCEAUX;
        setSize(800, 600);
        initComponents();
        setVisible(true);
    }
    
    private void initComponents() {
        JPanel panneauGauche = new JPanel();
        panneauGauche.setPreferredSize(new Dimension(400, 600));
        panneauGauche.setLayout(new BoxLayout(panneauGauche, BoxLayout.Y_AXIS));
        panneauGauche.setBorder(new EmptyBorder(5, 5, 5, 5));
        
        JPanel panelForme = new JPanel(new GridLayout(2, 2, 5, 5));
        panelForme.setBorder(BorderFactory.createTitledBorder("Forme"));
        
        rbPinceau = new JRadioButton("Pinceau", true);
        rbLigne = new JRadioButton("Ligne");
        rbRectangle = new JRadioButton("Rectangle");
        rbCercle = new JRadioButton("Cercle");
        
        ButtonGroup bgForme = new ButtonGroup();
        bgForme.add(rbPinceau);
        bgForme.add(rbLigne);
        bgForme.add(rbRectangle);
        bgForme.add(rbCercle);
        
        panelForme.add(rbPinceau);
        panelForme.add(rbLigne);
        panelForme.add(rbRectangle);
        panelForme.add(rbCercle);
        
        JPanel panelRemplir = new JPanel(new FlowLayout(FlowLayout.CENTER));
        panelRemplir.setBorder(BorderFactory.createTitledBorder("Remplir"));
        
        rbFill = new JRadioButton("Fill", false);
        panelRemplir.add(rbFill);
        
        JPanel panelTaille = new JPanel(new BorderLayout());
        panelTaille.setBorder(BorderFactory.createTitledBorder("Taille"));
        
        sliderTaille = new JSlider(JSlider.HORIZONTAL, 1, 20, 3);
        sliderTaille.setMajorTickSpacing(1);
        sliderTaille.setPaintTicks(true);
        sliderTaille.setPaintLabels(false);
        panelTaille.add(sliderTaille, BorderLayout.CENTER);
        panelTaille.setBorder(new EmptyBorder(5, 5, 5, 5));
        
        JPanel panelCouleur = new JPanel();
        panelCouleur.setLayout(new BoxLayout(panelCouleur, BoxLayout.Y_AXIS));
        panelCouleur.setBorder(BorderFactory.createTitledBorder("Color"));
        
        JPanel panelColorRadios = new JPanel(new GridLayout(1, 5, 5, 5));
        rbNoir = new JRadioButton("Noir", true);
        rbRouge = new JRadioButton("Rouge", false);
        rbBleu = new JRadioButton("Bleu", false);
        rbVert = new JRadioButton("Vert", false);
        rbJaune = new JRadioButton("Jaune", false);
        
        ButtonGroup bgColor = new ButtonGroup();
        bgColor.add(rbNoir);
        bgColor.add(rbRouge);
        bgColor.add(rbBleu);
        bgColor.add(rbVert);
        bgColor.add(rbJaune);
        
        panelColorRadios.add(rbNoir);
        panelColorRadios.add(rbRouge);
        panelColorRadios.add(rbBleu);
        panelColorRadios.add(rbVert);
        panelColorRadios.add(rbJaune);
        
        JPanel panelColorChoose = new JPanel(new FlowLayout(FlowLayout.CENTER));
        btnChooseColor = new JButton("Choose");
        panelColorChoose.add(btnChooseColor);
        
        panelCouleur.add(panelColorRadios);
        panelCouleur.add(panelColorChoose);
        
        JPanel panelBg = new JPanel();
        panelBg.setLayout(new BoxLayout(panelBg, BoxLayout.Y_AXIS));
        panelBg.setBorder(BorderFactory.createTitledBorder("BackgroundColor"));
        
        JPanel panelBgRadios = new JPanel(new GridLayout(1, 5, 5, 5));
        rbBgBlanc = new JRadioButton("Blanc", true);
        rbBgRouge = new JRadioButton("Rouge", false);
        rbBgBleu = new JRadioButton("Bleu", false);
        rbBgVert = new JRadioButton("Vert", false);
        rbBgJaune = new JRadioButton("Jaune", false);
        
        ButtonGroup bgBg = new ButtonGroup();
        bgBg.add(rbBgBlanc);
        bgBg.add(rbBgRouge);
        bgBg.add(rbBgBleu);
        bgBg.add(rbBgVert);
        bgBg.add(rbBgJaune);
        
        panelBgRadios.add(rbBgBlanc);
        panelBgRadios.add(rbBgRouge);
        panelBgRadios.add(rbBgBleu);
        panelBgRadios.add(rbBgVert);
        panelBgRadios.add(rbBgJaune);
        
        JPanel panelBgChoose = new JPanel(new FlowLayout(FlowLayout.CENTER));
        btnChooseBg = new JButton("Choisir");
        panelBgChoose.add(btnChooseBg);
        
        panelBg.add(panelBgRadios);
        panelBg.add(panelBgChoose);
        
        JPanel panelGomme = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 5));
        panelGomme.setBorder(BorderFactory.createTitledBorder("Gomme"));
        
        btnUndo = new JButton("Undo");
        btnRedo = new JButton("Redo");

        btnClear = new JButton("Clear");
        btnGomme = new JButton("Gomme");
        
        panelGomme.add(btnUndo);
        panelGomme.add(btnRedo);

        panelGomme.add(btnClear);
        panelGomme.add(btnGomme);
        
        panneauGauche.add(panelForme);
        panneauGauche.add(panelRemplir);
        panneauGauche.add(panelTaille);
        panneauGauche.add(panelCouleur);
        panneauGauche.add(panelBg);
        panneauGauche.add(panelGomme);
        
        zoneDessin = new ZoneDessin(modele);
        zoneDessin.setBackground(modele.getCouleurFond());
        
        add(panneauGauche, BorderLayout.WEST);
        add(zoneDessin, BorderLayout.CENTER);
        
        controleur = new ControleurDessin(modele, this);
        zoneDessin.addMouseListener(controleur);
        zoneDessin.addMouseMotionListener(controleur);
        
        rbPinceau.addActionListener(e -> outilSelectionne = OutilDessin.PINCEAUX);
        rbLigne.addActionListener(e -> outilSelectionne = OutilDessin.LIGNE);
        rbRectangle.addActionListener(e -> outilSelectionne = OutilDessin.RECTANGLE);
        rbCercle.addActionListener(e -> outilSelectionne = OutilDessin.CERCLE);
        
        btnGomme.addActionListener(e -> outilSelectionne = OutilDessin.GOMME);
        btnUndo.addActionListener(e -> {
            modele.annuler();
            zoneDessin.repaint();
        });
        btnRedo.addActionListener(e -> {
            modele.retablir();
            zoneDessin.repaint();
        });
        btnClear.addActionListener(e -> {
            modele.effacer();
            zoneDessin.repaint();
        });
        
        btnChooseColor.addActionListener(e -> {
            Color c = JColorChooser.showDialog(null, "Choisir la couleur du trait", couleurTrait);
            if (c != null) {
                couleurTrait = c;
                rbNoir.setSelected(false);
                rbRouge.setSelected(false);
                rbBleu.setSelected(false);
                rbVert.setSelected(false);
                rbJaune.setSelected(false);
            }
        });
        rbNoir.addActionListener(e -> couleurTrait = Color.BLACK);
        rbRouge.addActionListener(e -> couleurTrait = Color.RED);
        rbBleu.addActionListener(e -> couleurTrait = Color.BLUE);
        rbVert.addActionListener(e -> couleurTrait = Color.GREEN);
        rbJaune.addActionListener(e -> couleurTrait = Color.YELLOW);
        
        btnChooseBg.addActionListener(e -> {
            Color c = JColorChooser.showDialog(null, "Choisir la couleur d'arrière-plan", zoneDessin.getBackground());
            if (c != null) {
                modele.setCouleurFond(c);
                zoneDessin.setBackground(c);
                rbBgBlanc.setSelected(false);
                rbBgRouge.setSelected(false);
                rbBgBleu.setSelected(false);
                rbBgVert.setSelected(false);
                rbBgJaune.setSelected(false);
            }
        });
        rbBgBlanc.addActionListener(e -> {
            modele.setCouleurFond(Color.WHITE);
            zoneDessin.setBackground(Color.WHITE);
        });
        rbBgRouge.addActionListener(e -> {
            modele.setCouleurFond(Color.RED);
            zoneDessin.setBackground(Color.RED);
        });
        rbBgBleu.addActionListener(e -> {
            modele.setCouleurFond(Color.BLUE);
            zoneDessin.setBackground(Color.BLUE);
        });
        rbBgVert.addActionListener(e -> {
            modele.setCouleurFond(Color.GREEN);
            zoneDessin.setBackground(Color.GREEN);
        });
        rbBgJaune.addActionListener(e -> {
            modele.setCouleurFond(Color.YELLOW);
            zoneDessin.setBackground(Color.YELLOW);
        });
    }
    
    public OutilDessin getOutilSelectionne() {
        return outilSelectionne;
    }
    
    public float getEpaisseurSelectionnee() {
        return sliderTaille.getValue();
    }
    
    public boolean getEstRempli() {
        return rbFill.isSelected();
    }
    
    public Color getCouleurTrait() {
        return couleurTrait;
    }
    
    public ZoneDessin getZoneDessin() {
        return zoneDessin;
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ModeleDessin modele = new ModeleDessin();
            new VueDessin(modele);
        });
    }
    
    public ModeleDessin getModele() {
        return this.modele;
    }
}
---------------------------

===== ZoneDessin.java =====
package TP3;

import java.awt.BasicStroke;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.util.ArrayList;
import javax.swing.JPanel;

public class ZoneDessin extends JPanel {

    private ModeleDessin modele;
    private Forme formeEnCours; // forme en cours de dessin

    public ZoneDessin(ModeleDessin modele) {
        this.modele = modele;
    }

    public void setModele(ModeleDessin modele) {
        this.modele = modele;
    }

    // Permet de définir la forme en cours et de rafraîchir l'affichage
    public void setFormeEnCours(Forme f) {
        this.formeEnCours = f;
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        Graphics2D g2 = (Graphics2D) g;
        ArrayList<Forme> formes = modele.getFormes();

        // Dessiner les formes enregistrées dans le modèle
        for (Forme f : formes) {
            dessinerForme(g2, f);
        }

        // Dessiner la forme en cours si elle existe
        if (formeEnCours != null) {
            dessinerForme(g2, formeEnCours);
        }
    }

    // Méthode utilitaire pour dessiner une forme
    private void dessinerForme(Graphics2D g2, Forme f) {
        g2.setColor(f.getCouleur());
        g2.setStroke(new BasicStroke(f.getEpaisseur()));
        ArrayList<Point> pts = f.getPoints();

        switch (f.getOutil()) {
            case PINCEAUX:
            case GOMME:
                for (int i = 0; i < pts.size() - 1; i++) {
                    g2.drawLine(pts.get(i).x, pts.get(i).y, pts.get(i + 1).x, pts.get(i + 1).y);
                }
                break;

            case LIGNE:
                if (pts.size() >= 2) {
                    g2.drawLine(pts.get(0).x, pts.get(0).y, pts.get(1).x, pts.get(1).y);
                }
                break;

            case RECTANGLE:
                if (pts.size() >= 2) {
                    // Interpréter pts.get(0) comme le centre
                    Point center = pts.get(0);
                    Point current = pts.get(1);
                    int dx = Math.abs(current.x - center.x);
                    int dy = Math.abs(current.y - center.y);
                    int x = center.x - dx;
                    int y = center.y - dy;
                    int largeur = 2 * dx;
                    int hauteur = 2 * dy;
                    if (f.getRempli()) {
                        g2.fillRect(x, y, largeur, hauteur);
                    } else {
                        g2.drawRect(x, y, largeur, hauteur);
                    }
                }
                break;

            case CERCLE:
                if (pts.size() >= 2) {
                    // Interpréter pts.get(0) comme le centre
                    Point center = pts.get(0);
                    Point current = pts.get(1);
                    int dx = Math.abs(current.x - center.x);
                    int dy = Math.abs(current.y - center.y);
                    // Calculer le rayon en fonction de la distance euclidienne
                    int radius = (int) Math.hypot(dx, dy);
                    int topLeftX = center.x - radius;
                    int topLeftY = center.y - radius;
                    int diameter = 2 * radius;
                    if (f.getRempli()) {
                        g2.fillOval(topLeftX, topLeftY, diameter, diameter);
                    } else {
                        g2.drawOval(topLeftX, topLeftY, diameter, diameter);
                    }
                }
                break;
        }
    }
}
---------------------------

